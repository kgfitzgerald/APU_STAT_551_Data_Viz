---
title: "Palmer's Penguins"
format: 
  html:
    self-contained: true
    toc: true
    toc_float: true
    number-section: false
    highlight: tango
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, comment="")
#install.packages("palmerpenguins")
library(palmerpenguins)
library(tidyverse)
library(ggridges)
library(ggbeeswarm)
library(ggtext)
```

## Loading Data from a Package

The Palmer Penguin data is contained in the package `palmerpenguins`. To load the data, we use the `data()` function once the package has been called by `library()`, which we included in the setup chunk.

Notice how I named the code chunk `load-data` - this can be helpful in a longer document when you are trying to find specific code chunks. You can use the bottom left index to search through the document.

```{r load-data}
data("penguins")
```

## Histograms and Density Plots Demonstration

### Histograms

Here is a histogram for bill length. Notice what happens when we move some arguments outside of the `aes()`.

```{r}
penguins %>% 
  ggplot(aes(x = bill_length_mm)) +
  geom_histogram(binwidth = 3, 
                 color = "black",
                 fill = "#34baeb") +
  theme_light() +
  labs(x = "Bill Length (mm)",
       y = "Number of Penguins",
       title = "Penguins from Palmer's Archipelago")
```

You should always try several options for the bin width.

```{r}
penguins %>% 
  ggplot(aes(x = bill_length_mm)) +
  geom_histogram(binwidth = 1, 
                 color = "black",
                 fill = "#34baeb") +
  theme_light() +
  labs(x = "Bill Length (mm)",
       y = "Number of Penguins",
       title = "Penguins from Palmer's Archipelago")
```

### Density Plots

Here are the options for your kernel type:\
`kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")`

`adjust` is a multiplicate bandwidth adjustment. This makes it possible to adjust the bandwidth while still using the a bandwidth estimator. For example, adjust = 1/2 means use half of the default bandwidth. You can set the bandwidth directly using `bw =` as well.

```{r}
penguins %>% 
  ggplot(aes(x = bill_length_mm)) +
  geom_density(adjust = 0.5, 
               kernel = "gaussian", 
               color = "black",
               fill = "#34baeb",
               alpha = 0.5) +
  theme_light() +
  labs(x = "Bill Length (mm)",
       y = "Density",
       title = "Penguins from Palmer's Archipelago")
```

```{r}
penguins %>% 
  ggplot(aes(x = bill_length_mm)) +
  geom_density(adjust = 1.5, 
               kernel = "gaussian", 
               color = "black",
               fill = "#34baeb",
               alpha = 0.5) +
  theme_light() +
  labs(x = "Bill Length (mm)",
       y = "Density",
       title = "Penguins from Palmer's Archipelago")
```

```{r}
penguins %>% 
  ggplot(aes(x = bill_length_mm)) +
  geom_density(adjust = 0.5, 
               kernel = "rectangular", 
               color = "black",
               fill = "#34baeb",
               alpha = 0.5) +
  theme_light() +
  labs(x = "Bill Length (mm)",
       y = "Density",
       title = "Penguins from Palmer's Archipelago")

```

## Your Turn

Fill in the blanks to recreate the provided visualization. Remove `eval = FALSE` from each code chunk as you complete it. Provide a critique of your visualization as well.

### Group 1: Stacked Histogram

```{r, eval = FALSE}
penguins %>% 
  filter(species == "_____") %>% 
  drop_na(bill_length_mm, sex) %>% 
  ggplot(aes(x = ________, fill = ________)) + 
  geom_histogram(binwidth = ______, 
                 color = "grey",
                 alpha = 0.5,
                 position = "________") +
  theme_minimal() +
  labs(title = "_______",
       x = "__________",
       y = "__________",
       _____ = "Sex") +
  scale_______viridis_d()
```

### Group 1: Faceted Density Plots

```{r, eval = FALSE}
penguins %>% 
  drop_na(bill_length_mm, sex) %>% 
  ggplot(aes(x = _________)) + 
  geom_density(aes(fill = ______), alpha = 0.35) +
  facet_wrap(~_______, ncol = 1) + 
  theme_minimal() +
    labs(title = "_______",
       x = "__________",
       y = "__________",
       _____ = "Species") +
  scale_______viridis_d() +
```

### Group 1: Faceted Histogram

```{r, eval = FALSE}
penguins %>% 
  drop_na(bill_length_mm) %>% 
  ggplot(aes(x = __________)) + 
  geom_histogram(aes(fill = _________), binwidth = 1, alpha = 0.5) +
  theme_minimal() +
  facet_wrap(~_______, ncol = 1) + 
    labs(title = "_______",
       x = "__________",
       y = "__________",
       _____ = "Species") +
  scale_______viridis_d() +
  guides(fill = "________")
```

### Group 2: Overlaid Histogram

```{r, eval = FALSE}
penguins%>% 
  filter(species == "________") %>% 
  drop_na(bill_length_mm, sex) %>% 
  ggplot(aes(x = ______, fill = ________)) + 
  geom_histogram(binwidth = 1, 
                 color = "grey",
                 alpha = 0.5,
                 _______ = "identity") +
  theme_minimal() +
  labs(title = "_______",
       x = "__________",
       y = "__________",
       _____ = "Sex") +
  scale_______viridis_d()
```

### Group 2: Overlaid Densities

```{r, eval = FALSE}
penguins %>% 
  drop_na(bill_length_mm) %>% 
  ggplot(aes(x = ________)) + 
  geom_density(aes(fill = __________), alpha = 0.35) +
  theme_minimal() +
  labs(title = "_______",
       x = "__________",
       y = "__________",
       _____ = "Species") +
  scale_______viridis_d()
```

### Group 2: Faceted Density + Histogram Plots

```{r, eval = FALSE}
penguins %>% 
  drop_na(bill_length_mm) %>% 
  ggplot(aes(x = _________, fill = _________)) + 
  geom_histogram(aes(y = ..density..),
                 _________ = 0.5, color = "black") +
  geom_density(alpha = _________) +
  facet_wrap(~_________, ncol = 1) +
  theme_minimal() +
  labs(title = "_________",
       x = "_________",
       y = "_________") +
  guides(fill = "_________") +
  scale___________viridis_d()

```

# More Visualizations

## Boxplots, Dotplots, and Violin plots

Overlaying the values via the jitter plot can make our boxplot "more honest" so that we can just if we have enough data to trust the summary statistics used to create the distribution. This is true for both boxplots and violin plots.

### Boxplot + Jitter

```{r}
penguins %>% 
  drop_na(bill_length_mm, sex) %>% 
  ggplot(aes(x = bill_length_mm,  
             y = fct_reorder(species, 
                             .x = bill_length_mm,
                             .fun = median))) +  #notice, by setting universal aes() we don't have to repeat them in each geometry
  geom_boxplot(aes(fill = species), alpha = 0.5) +
  theme_minimal() +
  labs(title = "Penguin Culmen Length",
       x = "Culmen Length (mm)",
       y = "Penguin Species") +
  scale_fill_viridis_d() +
  geom_jitter(aes(color = species), 
              alpha = 0.5, height = 0.25) +
  guides(color = "none", fill = "none") + 
  scale_color_viridis_d()
  
```

### Violin Plot + Jitter

```{r}
penguins %>% 
  drop_na(bill_length_mm, sex) %>% 
  ggplot(aes(x = bill_length_mm,  
             y = fct_reorder(species, 
                             .x = bill_length_mm,
                             .fun = median))) +
  geom_violin(aes(fill = species), 
              alpha = 0.25) +
  theme_minimal() +
  labs(title = "Penguin Culmen Length",
       x = "Culmen Length (mm)",
       y = "Penguin Species") +
  scale_fill_viridis_d() +
  geom_jitter(aes(color = species), height = 0.25) +
  scale_color_viridis_d() +
  guides(color = "none", fill = "none")
```

Use can use the package `ggbeeswarm` to "fill in" the violin plot.

```{r}
penguins %>% 
  drop_na(bill_length_mm, sex) %>% 
  ggplot(aes(x = bill_length_mm,  
             y = fct_reorder(species, 
                             .x = bill_length_mm,
                             .fun = median))) +
  geom_violin(aes(fill = species), 
              alpha = 0.25) +
  theme_minimal() +
  labs(title = "Penguin Culmen Length",
       x = "Culmen Length (mm)",
       y = "Penguin Species") +
  scale_fill_viridis_d() +
  geom_quasirandom(aes(color = species), 
                   alpha = 0.75, groupOnX = FALSE) +
  scale_color_viridis_d() + 
  guides(color = "none", fill = "none")
```

### Ridge Plots

We can use the package `ggridges` to create ridge plots and `ggtext` to add in labels

```{r}
labels_n <- penguins %>% 
  drop_na(bill_length_mm, sex) %>% 
  group_by(species) %>% 
  summarise(n = n(), m = mean(bill_length_mm, na.rm = TRUE)) %>% 
  arrange(m) #I create the labels first

penguins %>% 
  drop_na(bill_length_mm, sex) %>% 
  ggplot(aes(x = bill_length_mm,  
             y = fct_reorder(species, 
                             .x = bill_length_mm,
                             .fun = mean))) +
  geom_density_ridges(aes(fill = sex),
                      bandwidth = 1,
                      rel_min_height = 0.01,
                      scale = 0.99) +
  theme_minimal() +
  labs(title = "Penguin Culmen Length",
       x = "Culmen Length (mm)",
       y = "Penguin Species",
       fill = "Sex") +
  scale_fill_viridis_d(alpha = 0.5) +
  theme(legend.position = "bottom") +
  geom_text(data = labels_n, aes(y = species,
                x = 60, 
                label = paste0("n=",n)),
            nudge_y = 0.1) 
```

## Raincloud Plots

We can use the package `ggdist` to help us form a raincloud plot. Here is the starting code. Modify the code to make it more visually appealing. Check out some of the tutorial for how to addjust aspects of each geometry.

```{r}
library(ggdist)
penguins %>% 
  drop_na(bill_length_mm) %>% 
  ggplot(aes(x = bill_length_mm,  
             y = fct_reorder(species, 
                             .x = bill_length_mm,
                             .fun = median),
             fill = species)) +
  stat_halfeye(alpha = 0.5) +
  stat_dots(side = "bottom") +
  geom_boxplot(alpha = 0.2) +
  theme_minimal() +
  labs(title = "Penguin Culmen Length",
       x = "Culmen Length (mm)",
       y = "Penguin Species") +
  scale_fill_viridis_d() +
  scale_color_viridis_d() + 
  guides(color = "none", fill = "none")
```

## Challenge - Recreate a Visualization

To calculate bill ratio, you need to do the following

```{r}
penguins <- penguins %>% 
  mutate(bill_ratio = bill_length_mm/bill_depth_mm)
```

Now try to recreate the visualization provided.

```{r}

```
