---
title: "Visualizing Geospatial Data"
format: 
  html:
    self-contained: true
    toc: true
    toc_float: true
    number-section: false
    highlight: tango
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, comment = "", error = TRUE)
library(tidyverse)
library(sf) #GIS magic!
library(scales) #to make better numbers on axes
```


# Introduction

We are going to recreate the following CDC [Dashboard](https://www.cdc.gov/nchs/data-visualization/mortality-leading-causes/index.htm).  To make the map, the data for the dashboard is by state and country but it does not have a "geometry" column for the shapefile attached, so we will have to join our data file with the shapefile to have a complete data set.


## Shapefiles

Since we are only going to create a map of the United States, we only use the following shapefiles:  

-   US states: 20m 2018 state boundaries from the US Census Bureau

We will read those in below:

```{r}
# Download cb_2018_us_state_20m.zip under "States" from
# https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html
us_states <- read_sf("shapefiles/cb_2018_us_state_20m/cb_2018_us_state_20m.shp")
```



## Setting up the map

Our goal is to recreate the map from the following CDC [Dashboard](https://www.cdc.gov/nchs/data-visualization/mortality-leading-causes/index.htm).

Let's start with the map of the US:

```{r}
lower_48 <- us_states %>% 
  filter(!(NAME %in% c("Alaska", "Hawaii", "Puerto Rico")))

ggplot() + 
  geom_sf(data = lower_48, fill = "#192DA1", color = "white", linewidth = 0.25) +
  coord_sf(crs = "ESRI:102003") +  # Albers
  theme_void()
```

We can extract data from the CDC on causes of death:

```{r}
causes_raw <- read_csv("NCHS_-_Leading_Causes_of_Death__United_States.csv") %>% janitor::clean_names()
str(causes_raw)
```

We can look at our data and make sure everything matches up. (This code is letting us check if each state appears one time.)

```{r}
causes_raw %>% 
  distinct(state)
```

Notice that the United States is included in there with the states. Now we need to join our lower 48 states data with our "geometry" information with the data on community transmission risk.

```{r}
lower_48 %>% 
  st_transform(5070) %>% 
  left_join(causes_raw, by = c("NAME" = "state")) -> cause_sf
```


```{r}
#this dataset now has causes WITH shapefile information
head(cause_sf)
```


We can also take a look at the causes:

```{r}
causes_raw %>% 
  distinct(cause_name)
```


We need to calucate the average as a midpoint for our data. This value will be used as the midpoint of our color scale in the map.

```{r}
cause_sf %>%
  filter(cause_name == "All causes", year == 2017) %>% 
  summarise(avg = mean(age_adjusted_death_rate)) -> stats_cause

stats_cause
```


Now we can make our plot! We will just focus on "All causes" in the year 2017 (we will learn how to make interactive graphs later in the semester).

```{r}
cause_sf %>%
  #filter rows with all causes for 2017
  _______(cause_name == "All causes", year == 2017) %>% 
  ggplot() +  #initiate polot
  geom_sf(aes(_______ = geometry,  #set aes for the map
              _______ = age_adjusted_death_rate), #set the color
          color = "black", linewidth = 0.15) +  
  labs(title = "Age-adjusted Death Rates for All causes, by State: 2017 ",
       fill = "Legend for Age-Adjusted Death Rate Per 100,000 U.S. Standard Population")  +
  scale______gradient2(low = "#2d4879", high = "#911d1e", mid = "lightgrey",
                       midpoint = stats_cause$avg) + #set the right coloring aesthetic to the desired scale
  theme_void() + #theme that removes everything
  theme(plot.title = element_text(hjust = 0.5), #adjusts title location
        legend.position = "bottom") + #moves legend to the bottom
  guides(fill = guide_colorbar(title.position = "top", #puts the legend title on top of the colorbar
                               title.hjust = 0.5, #centers the legend title
                               label.position = "bottom", #puts labels for color bar on bottom
                               label.hjust = 0.5, #centers labels
                               barwidth = 25, #sets color bar width
                               ticks.linewidth = 2, #sets tick line width
                               direction = "horizontal")) #sets colorbar direction
```

Yay! This is a fairly similar graph to the original map, but without the interactivity (which we can add later). Now let's move this to a dashboard.

Download `CDC_Dashboard.qmd` file from GitHub. Copy and paste the code from the previous code chunk and paste it into the code chunk on line 99 of the `CDC_Dashboard.qmd` document. Render the document and submit your .html on Canvas.  

